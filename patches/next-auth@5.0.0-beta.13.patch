diff --git a/lib/actions.js b/lib/actions.js
index f4c44d79f4251744f0e99fb382515c4a668ddf2e..c6fc0c8da3afdc2e226f159f95d961a09a3b7a51 100644
--- a/lib/actions.js
+++ b/lib/actions.js
@@ -1,89 +1,107 @@
 import { Auth, raw, skipCSRFCheck } from "@auth/core";
 import { headers as nextHeaders, cookies } from "next/headers";
 import { redirect } from "next/navigation";
-export async function signIn(provider, options = {}, authorizationParams, config) {
-    const headers = new Headers(nextHeaders());
-    const { redirect: shouldRedirect = true, redirectTo, ...rest } = options instanceof FormData ? Object.fromEntries(options) : options;
-    const callbackUrl = redirectTo?.toString() ?? headers.get("Referer") ?? "/";
-    const signInURL = createActionURL("signin", headers, config.basePath);
-    if (!provider) {
-        signInURL.searchParams.append("callbackUrl", callbackUrl);
-        if (shouldRedirect)
-            redirect(signInURL.toString());
-        return signInURL.toString();
+export async function signIn(
+  provider,
+  options = {},
+  authorizationParams,
+  config
+) {
+  const headers = new Headers(nextHeaders());
+  const {
+    redirect: shouldRedirect = true,
+    redirectTo,
+    ...rest
+  } = options instanceof FormData ? Object.fromEntries(options) : options;
+  const callbackUrl = redirectTo?.toString() ?? headers.get("Referer") ?? "/";
+  const signInURL = createActionURL("signin", headers, config.basePath);
+  console.log({
+    signInURL,
+    basePath: config.basePath,
+    env: process.env.AUTH_URL,
+  });
+  if (!provider) {
+    signInURL.searchParams.append("callbackUrl", callbackUrl);
+    if (shouldRedirect) redirect(signInURL.toString());
+    return signInURL.toString();
+  }
+  let url = `${signInURL}/${provider}?${new URLSearchParams(
+    authorizationParams
+  )}`;
+  let foundProvider = {};
+  for (const providerConfig of config.providers) {
+    const { options, ...defaults } =
+      typeof providerConfig === "function" ? providerConfig() : providerConfig;
+    const id = options?.id ?? defaults.id;
+    if (id === provider) {
+      foundProvider = {
+        id,
+        type: options?.type ?? defaults.type,
+      };
+      break;
     }
-    let url = `${signInURL}/${provider}?${new URLSearchParams(authorizationParams)}`;
-    let foundProvider = {};
-    for (const providerConfig of config.providers) {
-        const { options, ...defaults } = typeof providerConfig === "function" ? providerConfig() : providerConfig;
-        const id = options?.id ?? defaults.id;
-        if (id === provider) {
-            foundProvider = {
-                id,
-                type: options?.type ?? defaults.type,
-            };
-            break;
-        }
-    }
-    if (!foundProvider.id) {
-        const url = `${signInURL}?${new URLSearchParams({ callbackUrl })}`;
-        if (shouldRedirect)
-            redirect(url);
-        return url;
-    }
-    if (foundProvider.type === "credentials") {
-        url = url.replace("signin", "callback");
-    }
-    headers.set("Content-Type", "application/x-www-form-urlencoded");
-    const body = new URLSearchParams({ ...rest, callbackUrl });
-    const req = new Request(url, { method: "POST", headers, body });
-    const res = await Auth(req, { ...config, raw, skipCSRFCheck });
-    for (const c of res?.cookies ?? [])
-        cookies().set(c.name, c.value, c.options);
-    if (shouldRedirect)
-        return redirect(res.redirect);
-    return res.redirect;
+  }
+  if (!foundProvider.id) {
+    const url = `${signInURL}?${new URLSearchParams({ callbackUrl })}`;
+    if (shouldRedirect) redirect(url);
+    return url;
+  }
+  if (foundProvider.type === "credentials") {
+    url = url.replace("signin", "callback");
+  }
+  headers.set("Content-Type", "application/x-www-form-urlencoded");
+  const body = new URLSearchParams({ ...rest, callbackUrl });
+  const req = new Request(url, { method: "POST", headers, body });
+  const res = await Auth(req, { ...config, raw, skipCSRFCheck });
+  for (const c of res?.cookies ?? []) cookies().set(c.name, c.value, c.options);
+  if (shouldRedirect) return redirect(res.redirect);
+  return res.redirect;
 }
 export async function signOut(options, config) {
-    const headers = new Headers(nextHeaders());
-    headers.set("Content-Type", "application/x-www-form-urlencoded");
-    const url = createActionURL("signout", headers, config.basePath);
-    const callbackUrl = options?.redirectTo ?? headers.get("Referer") ?? "/";
-    const body = new URLSearchParams({ callbackUrl });
-    const req = new Request(url, { method: "POST", headers, body });
-    const res = await Auth(req, { ...config, raw, skipCSRFCheck });
-    for (const c of res?.cookies ?? [])
-        cookies().set(c.name, c.value, c.options);
-    if (options?.redirect ?? true)
-        return redirect(res.redirect);
-    return res;
+  const headers = new Headers(nextHeaders());
+  headers.set("Content-Type", "application/x-www-form-urlencoded");
+  const url = createActionURL("signout", headers, config.basePath);
+  const callbackUrl = options?.redirectTo ?? headers.get("Referer") ?? "/";
+  const body = new URLSearchParams({ callbackUrl });
+  const req = new Request(url, { method: "POST", headers, body });
+  const res = await Auth(req, { ...config, raw, skipCSRFCheck });
+  for (const c of res?.cookies ?? []) cookies().set(c.name, c.value, c.options);
+  if (options?.redirect ?? true) return redirect(res.redirect);
+  return res;
 }
 export async function update(data, config) {
-    const headers = new Headers(nextHeaders());
-    headers.set("Content-Type", "application/json");
-    const url = createActionURL("session", headers, config.basePath);
-    const body = JSON.stringify({ data });
-    const req = new Request(url, { method: "POST", headers, body });
-    const res = await Auth(req, { ...config, raw, skipCSRFCheck });
-    for (const c of res?.cookies ?? [])
-        cookies().set(c.name, c.value, c.options);
-    return res.body;
+  const headers = new Headers(nextHeaders());
+  headers.set("Content-Type", "application/json");
+  const url = createActionURL("session", headers, config.basePath);
+  const body = JSON.stringify({ data });
+  const req = new Request(url, { method: "POST", headers, body });
+  const res = await Auth(req, { ...config, raw, skipCSRFCheck });
+  for (const c of res?.cookies ?? []) cookies().set(c.name, c.value, c.options);
+  return res.body;
 }
 /**
  * Extract the origin and base path from either `AUTH_URL` or `NEXTAUTH_URL` environment variables,
  * or the request's headers and the {@link NextAuthConfig.basePath} option.
  */
 export function createActionURL(action, h, basePath) {
-    const envUrl = process.env.AUTH_URL ?? process.env.NEXTAUTH_URL;
-    if (envUrl) {
-        const { origin, pathname } = new URL(envUrl);
-        const separator = pathname.endsWith("/") ? "" : "/";
-        return new URL(`${origin}${pathname}${separator}${action}`);
-    }
-    const host = h.get("x-forwarded-host") ?? h.get("host");
-    const protocol = h.get("x-forwarded-proto") === "http" ? "http" : "https";
-    // @ts-expect-error `basePath` value is default'ed to "/api/auth" in `setEnvDefaults`
-    const { origin, pathname } = new URL(basePath, `${protocol}://${host}`);
+  const envUrl = process.env.AUTH_URL ?? process.env.NEXTAUTH_URL;
+
+  if (envUrl) {
+    const { origin, pathname } = new URL(envUrl);
     const separator = pathname.endsWith("/") ? "" : "/";
+    console.log({
+      actionUrl: `${origin}${pathname}${separator}${action}`,
+    });
     return new URL(`${origin}${pathname}${separator}${action}`);
+  }
+  const host = h.get("x-forwarded-host") ?? h.get("host");
+  const protocol = h.get("x-forwarded-proto") === "http" ? "http" : "https";
+  // @ts-expect-error `basePath` value is default'ed to "/api/auth" in `setEnvDefaults`
+  const { origin, pathname } = new URL(basePath, `${protocol}://${host}`);
+  const separator = pathname.endsWith("/") ? "" : "/";
+
+  console.log({
+    actionUrl: `${origin}${pathname}${separator}${action}`,
+  });
+  return new URL(`${origin}${pathname}${separator}${action}`);
 }